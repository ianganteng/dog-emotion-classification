# -*- coding: utf-8 -*-
"""dog_emotion_deployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19msf7aIGxgRyke7ARuSN13hr-7e9vWYd
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
import numpy as np
from PIL import Image
import gradio as gr


from tensorflow.keras.applications.resnet50 import preprocess_input # Sesuaikan jika model Anda bukan ResNet50

MODEL_PATH = "/content/drive/MyDrive/Colab Notebooks/Machine_Learning_AOL/model_final/dog_emotion_prediction_final.keras"

CLASS_NAMES = ["Angry", "Happy", "Sad", "Neutral"] # Ganti dengan label kelas Anda


# Load model saat aplikasi Gradio dimulai
try:
    model = tf.keras.models.load_model(MODEL_PATH)
    print(f"Model loaded successfully from {MODEL_PATH}")

except Exception as e:
    print(f"Error loading model from {MODEL_PATH}: {e}")
    exit() # Keluar dari aplikasi jika model tidak bisa dimuat

# --- Bagian Preprocessing ---
def preprocess(image: Image.Image):
    image = image.resize((224, 224))
    img_array = np.array(image)

    # Jangan lupa pake preprocess input sesuai model, model kita-> Resnet
    img_array = preprocess_input(img_array)
    return np.expand_dims(img_array, axis=0)


def predict_emotion_with_confidence(image: Image.Image):
    input_tensor = preprocess(image)
    preds = model.predict(input_tensor)[0]
    confidences = {}
    for i, class_name in enumerate(CLASS_NAMES):


        confidence_percent = f"{preds[i]*100:.2f}%" # Format 2 angka di belakang koma
        confidences[class_name] = confidence_percent

    raw_confidences_for_label = {CLASS_NAMES[i]: float(preds[i]) for i in range(len(CLASS_NAMES))}


    result_string = "Prediksi Emosi Anjing:\n"
    sorted_preds_indices = np.argsort(preds)[::-1]
    for idx in sorted_preds_indices:
        class_name = CLASS_NAMES[idx]
        confidence_percent = f"{preds[idx]*100:.2f}%"
        result_string += f"- {class_name}: {confidence_percent}\n"

    return raw_confidences_for_label
iface = gr.Interface(
    fn=predict_emotion_with_confidence,
    inputs=gr.Image(type="pil", label="Upload Picture"),
    outputs=gr.Label(num_top_classes=len(CLASS_NAMES)), # Menampilkan semua kelas dengan probabilitas
    # Jika ingin menampilkan teks dengan persentase
    # outputs=gr.Textbox(label="Hasil Prediksi"),
    title="Dog Emotion Predictor",
    description="Upload a picture of your dog and we will predict its emotion! ",
)

iface.launch()
